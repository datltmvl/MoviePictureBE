# Workflow name
name: CD Workflow

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    branches:
      - main

# Jobs defined in the workflow
jobs:
  lint:
    # The operating system for the runner
    runs-on: ubuntu-latest

    # Steps in the job
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Use python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Cache pip dependencies
      uses: actions/cache@v3
      env:
        cache-name: cache-pip-modules
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev
 
    - name: Run linting
      run: pipenv run lint

  test:
    # The operating system for the runner
    runs-on: ubuntu-latest

    # Steps in the job
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Use python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Cache pip dependencies
      uses: actions/cache@v3
      env:
        cache-name: cache-pip-modules
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev

    - name: Run tests
      run: pipenv run test

  build:
    # Only run after the first 2 succeed
    needs: [lint, test]
    # The operating system for the runner
    runs-on: ubuntu-latest

    # Steps in the job
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Use python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      env:
        cache-name: cache-pip-modules
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
  
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ecr"
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Deploy to Kubernetes
      run: |
        echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
        kubectl apply -f deployment.yml --kubeconfig=kubeconfig.yaml
